using System;
using System.Collections.Generic;
using System.Text;
using GDA.Analysis;
using System.Data;
using MySql.Data.MySqlClient;
using System.Text.RegularExpressions;
namespace GDA.Provider.MySql
{
	public class MySqlAnalyzer : DatabaseAnalyzer
	{
		public MySqlAnalyzer (MySqlProviderConfiguration a) : base (a)
		{
		}
		public override void Analyze (string a)
		{
			bool b = a != null;
			IDbConnection c = ProviderConfiguration.CreateConnection ();
			IDbCommand d = c.CreateCommand ();
			d.Connection = c;
			d.CommandText = "show tables";
			IDbDataAdapter e = ProviderConfiguration.Provider.CreateDataAdapter ();
			e.SelectCommand = d;
			DataSet f = new DataSet ();
			if (c.State != ConnectionState.Open)
				c.Open ();
			try {
				try {
					e.Fill (f);
				}
				finally {
					c.Close ();
				}
				DataTable g = f.Tables [0];
				for (int h = 0; h < g.Rows.Count; h++) {
					string i = g.Rows [h] [0].ToString ();
					if (!b || a.ToLower ().Equals (i.ToLower ())) {
						TableMap j = GetTableMap (i);
						if (j == null) {
							j = new TableMap (ProviderConfiguration, i);
							tablesMaps [i.ToLower ()] = j;
						}
						GetColumnData (j);
						GetConstraintData (j);
						if (b)
							break;
					}
				}
			}
			catch (Exception ex) {
				throw new GDAException ("An error occurred while analyzing the database schema.", ex);
			}
		}
		private void GetColumnData (TableMap a)
		{
			IDbConnection b = ProviderConfiguration.CreateConnection ();
			IDbCommand c = b.CreateCommand ();
			c.Connection = b;
			string d = String.Format (@"SELECT Column_Name AS Field, Column_Type AS Type, 
                                                Is_Nullable, Column_Key, Column_Default, Extra, Column_Comment 
                                                FROM Information_Schema.Columns 
                                                WHERE Table_Schema='{0}' AND Table_Name='{1}';", b.Database, a.TableName);
			c.CommandText = d;
			if (b.State != ConnectionState.Open)
				b.Open ();
			try {
				IDataReader e = c.ExecuteReader ();
				while (e.Read ()) {
					string f = e ["Field"].ToString ();
					FieldMap g = a.GetFieldMapFromColumn (f);
					if (g == null) {
						g = new FieldMap (a, f);
						a.Fields.Add (g);
					}
					string h = e ["Type"].ToString ();
					bool i;
					g.SetDbType (ExtractType (h, out i), i);
					g.Size = ExtractSize (h);
					g.IsNullable = (e ["Is_Nullable"].ToString () == "YES");
					g.IsPrimaryKey = (e ["Column_Key"].ToString () == "PRI");
					if (g.IsPrimaryKey)
						g.IsAutoGenerated = (e ["Extra"].ToString () == "auto_increment");
					g.Comment = e.GetString (e.GetOrdinal ("Column_Comment"));
				}
			}
			finally {
				b.Close ();
			}
		}
		private void GetConstraintData (TableMap a)
		{
			IDbConnection b = ProviderConfiguration.CreateConnection ();
			IDbCommand c = b.CreateCommand ();
			c.Connection = b;
			c.CommandText = String.Format ("show create table `{0}`", a.TableName);
			if (b.State != ConnectionState.Open)
				b.Open ();
			try {
				IDataReader d = c.ExecuteReader ();
				if (d.Read ()) {
					string e = d.GetFieldType (1) == typeof(byte[]) ? Encoding.Default.GetString ((byte[])d [1]) : d.GetString (1);
					if (e != null && e.Length > 5) {
						string[] f = e.Split (',');
						foreach (string cmt in f) {
							string g = cmt.Trim ();
							string h = @"\(`?(?<column>\w+)`?\) REFER .*/(?<fkTable>\w+)[`\s]+\(`?(?<fkColumn>\w+)`?\)";
							Regex i = new Regex (h, RegexOptions.ExplicitCapture | RegexOptions.Compiled);
							Match j = i.Match (g);
							if (j.Success) {
								FieldMap k = a.GetFieldMapFromColumn (j.Groups ["column"].Value);
								if (k != null) {
									k.ForeignKeyTableName = j.Groups ["fkTable"].Value;
									k.ForeignKeyColumnName = j.Groups ["fkColumn"].Value;
								}
							}
							else {
								h = @"[\s\w]FOREIGN KEY\s\(`?(?<column>\w+)`?\) REFERENCES `?(?<fkTable>\w+)`? \(`?(?<fkColumn>\w+)`?\)";
								Regex l = new Regex (h, RegexOptions.ExplicitCapture | RegexOptions.Compiled);
								Match m = l.Match (g);
								if (m.Success) {
									FieldMap k = a.GetFieldMapFromColumn (m.Groups ["column"].Value);
									if (k != null) {
										k.ForeignKeyTableName = m.Groups ["fkTable"].Value;
										k.ForeignKeyColumnName = m.Groups ["fkColumn"].Value;
									}
								}
								else if (g != null) {
									int n = g.IndexOf ("REFER");
									if (n > 0) {
										string o = ExtractColumn (g.Substring (0, n - 1));
										g = g.Substring (n + 5, g.Length - n - 5).Trim ();
										n = g.IndexOf ("/");
										int p = g.IndexOf ("(");
										int q = g.IndexOf (")");
										if (n > 0 && p > 0 && q > p) {
											string r = g.Substring (n + 1, p - n - 1);
											string s = g.Substring (p + 1, q - p - 1);
											FieldMap k = a.GetFieldMapFromColumn (o);
											k.ForeignKeyTableName = r;
											k.ForeignKeyColumnName = s;
										}
									}
								}
							}
						}
					}
				}
			}
			finally {
				b.Close ();
			}
		}
		private static string ExtractColumn (string a)
		{
			string b = a.Trim ();
			if (b.StartsWith ("("))
				b = b.Substring (1, b.Length - 1);
			if (b.EndsWith (")"))
				b = b.Substring (0, b.Length - 1);
			return b;
		}
		private static string ExtractType (string a, out bool b)
		{
			int c = a.IndexOf (" ");
			b = c > 0 && a.IndexOf ("unsigned", c, a.Length - c) > 0;
			int d = a.IndexOf ("(");
			if (d != -1)
				return a.Substring (0, d);
			else
				return b ? a.Substring (0, c) : a;
		}
		private static int ExtractSize (string a)
		{
			int b = a.IndexOf ("(");
			if (b != -1) {
				int c = a.IndexOf (")");
				string d = a.Substring (b + 1, c - b - 1);
				if (d.IndexOfAny (new char[] {
					'\'',
					'"'
				}) != -1)
					return 0;
				b = d.IndexOf (",");
				if (b != -1)
					return Convert.ToInt32 (d.Substring (0, b));
				else
					return Convert.ToInt32 (d);
			}
			else
				return 0;
		}
	}
}
