using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
namespace GDA.Analysis
{
	public class FieldMap
	{
		private TableMap _table;
		private string _comment;
		private string _columnName;
		private bool _isReservedWord = false;
		private bool _isNullable = false;
		private bool _isAutoGenerated = false;
		private bool _isPrimaryKey = false;
		private string _foreignKeyTableName = null;
		private string _foreignKeyTableSchema = null;
		private string _foreignKeyColumnName = null;
		private string _foreignKeyConstraintName = null;
		private string _dbTypeName;
		private long _dbType;
		private int _size;
		private int _columnId;
		private bool _isReadOnly = false;
		public TableMap Table {
			get {
				return _table;
			}
		}
		public Type MemberType {
			get {
				Type a = _table.ProviderConfiguration.Provider.GetSystemType (this.DbType);
				if (IsNullable && a.IsValueType)
					a = typeof(Nullable<>).MakeGenericType (a);
				return a;
			}
		}
		public string Comment {
			get {
				return _comment;
			}
			set {
				_comment = value;
			}
		}
		public string ColumnName {
			get {
				return _columnName;
			}
			set {
				_columnName = value;
			}
		}
		public bool IsReservedWord {
			get {
				return _isReservedWord;
			}
			set {
				_isReservedWord = value;
			}
		}
		public bool IsNullable {
			get {
				return _isNullable;
			}
			set {
				_isNullable = value;
			}
		}
		public bool IsAutoGenerated {
			get {
				return _isAutoGenerated;
			}
			set {
				_isAutoGenerated = value;
			}
		}
		public bool IsPrimaryKey {
			get {
				return _isPrimaryKey;
			}
			set {
				_isPrimaryKey = value;
			}
		}
		public string ForeignKeyConstraintName {
			get {
				return _foreignKeyConstraintName;
			}
			set {
				_foreignKeyConstraintName = value;
			}
		}
		public string ForeignKeyTableName {
			get {
				return _foreignKeyTableName;
			}
			set {
				_foreignKeyTableName = value;
			}
		}
		public string ForeignKeyTableSchema {
			get {
				return _foreignKeyTableSchema;
			}
			set {
				_foreignKeyTableSchema = value;
			}
		}
		public string ForeignKeyColumnName {
			get {
				return _foreignKeyColumnName;
			}
			set {
				_foreignKeyColumnName = value;
			}
		}
		public string DbTypeName {
			get {
				return _dbTypeName;
			}
			set {
				_dbTypeName = value;
			}
		}
		public long DbType {
			get {
				return _dbType;
			}
		}
		public int Size {
			get {
				return _size;
			}
			set {
				_size = value;
			}
		}
		public bool IsReadOnly {
			get {
				return _isReadOnly;
			}
			set {
				_isReadOnly = value;
			}
		}
		public int ColumnId {
			get {
				return _columnId;
			}
			set {
				_columnId = value;
			}
		}
		public FieldMap (TableMap a, string b)
		{
			_table = a;
			_columnName = b;
		}
		public void SetDbType (long a)
		{
			_dbType = a;
		}
		public void SetDbType (DbType a)
		{
			_dbType = (long)a;
		}
		public void SetDbType (string a, bool b)
		{
			try {
				long c = Table.ProviderConfiguration.Provider.GetDbType (a, b);
				if (c != Provider.Provider.No_DbType)
					_dbType = c;
			}
			catch (Exception fe) {
				throw new GDAException ("Unsupported column type");
			}
		}
		public override string ToString ()
		{
			return ColumnName;
		}
	}
}
