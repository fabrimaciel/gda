/* 
 * GDA - Generics Data Access, is framework to object-relational mapping 
 * (a programming technique for converting data between incompatible 
 * type systems in databases and Object-oriented programming languages) using c#.
 * 
 * Copyright (C) 2010  <http://www.colosoft.com.br/gda> - support@colosoft.com.br
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;

namespace GDA.Provider
{
	[Flags]
	public enum Capability
	{
		/// <summary>
		/// This capability signifies that the database backend supports executing 
		/// multiple SQL statements in one batch. When this capability is not present
		/// Gentle will perform two queries for insert operations on tables with 
		/// autogenerated primary keys (one to perform the insert and one for 
		/// retrieving the generated key).
		/// </summary>
		BatchQuery = 1,
		/// <summary>
		/// This capability signifies that the database backend supports paging of
		/// result sets, i.e. that SQL can be generated to retrieve only a certain
		/// set of rows.
		/// </summary>
		Paging = 2,
		/// <summary>
		/// This capability signifies that the data provider supports named parameters.
		/// If not supported, positional parameters will be used instead.
		/// </summary>
		NamedParameters = 4
	}
}
