/* 
 * GDA - Generics Data Access, is framework to object-relational mapping 
 * (a programming technique for converting data between incompatible 
 * type systems in databases and Object-oriented programming languages) using c#.
 * 
 * Copyright (C) 2010  <http://www.colosoft.com.br/gda> - support@colosoft.com.br
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using System.Collections.Generic;
using System.Text;
using GDA.Analysis;
using System.Data;

namespace GDA.Provider.MsSql
{
	public class MsSqlAnalyzer : MsSql92Analyzer
	{
		/// <summary>
		/// Construtor padrão.
		/// </summary>
		/// <param name="provider"></param>
		public MsSqlAnalyzer(MsSqlProviderConfiguration provider) : base(provider)
		{
		}

		/// <summary>
		/// Please refer to the <see cref="DatabaseAnalyzer"/> class and the <see cref="DatabaseAnalyzer"/> 
		/// interface it implements a description of this method.
		/// </summary>
		/// <param name="tableName"></param>
		public override void Analyze(string tableName)
		{
			base.Analyze(tableName);
			foreach (TableMap map in tablesMaps.Values)
			{
				GetIdentityInformation(map);
			}
		}

		/// <summary>
		/// Please refer to the <see cref="DatabaseAnalyzer"/> class and the <see cref="DatabaseAnalyzer"/> 
		/// interface it implements a description of this method.
		/// </summary>
		public override void Analyze(string tableName, string tableSchema)
		{
			base.Analyze(tableName, tableSchema);
			foreach (TableMap map in tablesMaps.Values)
			{
				GetIdentityInformation(map);
			}
		}

		/// <summary>
		/// Recupera as informações sobre a chave identidade da tabela.
		/// </summary>
		/// <param name="map"></param>
		protected void GetIdentityInformation(TableMap map)
		{
			if(map != null)
			{
				IDbConnection conn = ProviderConfiguration.CreateConnection();
				GDAConnectionManager.NotifyConnectionCreated(conn);
				IDbCommand cmd = conn.CreateCommand();
				cmd.Connection = conn;
				if(conn.State != ConnectionState.Open)
				{
					conn.Open();
					GDAConnectionManager.NotifyConnectionOpened(conn);
				}
				try
				{
					foreach (FieldMap fm in map.Fields)
					{
						if(fm.IsPrimaryKey)
						{
							if(!map.IsView)
							{
								cmd.CommandText = String.Format("select COLUMNPROPERTY(OBJECT_ID('{0}'), '{1}', 'IsIdentity') as IsIdentity ", map.TableName, fm.ColumnName);
								using (IDataReader reader = cmd.ExecuteReader())
								{
									if(reader.Read())
										fm.IsAutoGenerated = (reader["IsIdentity"].ToString() == "1");
								}
							}
						}
					}
				}
				catch(Exception ex)
				{
					GDAOperations.CallDebugTrace(this, String.Format("Unable to determine whether PK column of table {0} is an identity column.", map.TableName));
					GDAOperations.CallDebugTrace(this, ex.Message);
				}
				finally
				{
					conn.Close();
					conn.Dispose();
				}
			}
		}
	}
}
